.TH "libft/includes/libft.h" 3 "Wed Jul 6 2016" "minishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libft/includes/libft.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <string\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBs_list\fP"
.br
.ti -1c
.RI "struct \fBs_file\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBUFF_SIZE\fP   128"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBs_list\fP \fBt_list\fP"
.br
.ti -1c
.RI "typedef struct \fBs_file\fP \fBt_file\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBft_pmem\fP (const void *addr, size_t t)"
.br
.ti -1c
.RI "int \fBget_next_line\fP (int const fd, char **line)"
.br
.ti -1c
.RI "void \fBft_swap\fP (void *a, void *b)"
.br
.ti -1c
.RI "void \fBft_iswap\fP (int *a, int *b)"
.br
.ti -1c
.RI "int \fBft_getndigits\fP (int a)"
.br
.ti -1c
.RI "void \fBft_putchar\fP (char c)"
.br
.ti -1c
.RI "void \fBft_putchar_fd\fP (char c, int fd)"
.br
.ti -1c
.RI "void \fBft_putstr\fP (char const *s)"
.br
.ti -1c
.RI "void \fBft_putstr_fd\fP (char const *s, int fd)"
.br
.ti -1c
.RI "void \fBft_putendl\fP (char const *s)"
.br
.ti -1c
.RI "void \fBft_putendl_fd\fP (char const *s, int fd)"
.br
.ti -1c
.RI "void \fBft_putnbr\fP (int n)"
.br
.ti -1c
.RI "void \fBft_putnbr_fd\fP (int n, int fd)"
.br
.ti -1c
.RI "void \fBft_puthex\fP (unsigned char num)"
.br
.ti -1c
.RI "size_t \fBft_strlen\fP (const char *str)"
.br
.ti -1c
.RI "int \fBft_strcmp\fP (char *s1, char *s2)"
.br
.ti -1c
.RI "int \fBft_strncmp\fP (char const *s1, char const *s2, size_t n)"
.br
.ti -1c
.RI "char * \fBft_strnew\fP (size_t size)"
.br
.ti -1c
.RI "char * \fBft_strcat\fP (char *s1, const char *s2)"
.br
.ti -1c
.RI "char * \fBft_strncat\fP (char *s1, const char *s2, size_t n)"
.br
.ti -1c
.RI "size_t \fBft_strlcat\fP (char *dest, char const *src, size_t size)"
.br
.ti -1c
.RI "char * \fBft_strcpy\fP (char *dest, const char *src)"
.br
.ti -1c
.RI "char * \fBft_strncpy\fP (char *dest, const char *src, size_t n)"
.br
.ti -1c
.RI "char * \fBft_strjoin\fP (char const *s1, char const *s2)"
.br
.ti -1c
.RI "char ** \fBft_strsplit\fP (char const *s, char *c)"
.br
.ti -1c
.RI "void \fBft_strdel\fP (char **as)"
.br
.ti -1c
.RI "void \fBft_strclr\fP (char *s)"
.br
.ti -1c
.RI "char * \fBft_strchr\fP (char const *s, int c)"
.br
.ti -1c
.RI "char * \fBft_strrchr\fP (char const *s, int c)"
.br
.ti -1c
.RI "int \fBft_strcchr\fP (char const *s, char c)"
.br
.ti -1c
.RI "int \fBft_strclchr\fP (char const *s, char c)"
.br
.ti -1c
.RI "char * \fBft_strsub\fP (char const *s, unsigned int start, size_t len)"
.br
.ti -1c
.RI "char * \fBft_strdup\fP (const char *s1)"
.br
.ti -1c
.RI "char * \fBft_strtrim\fP (char const *s)"
.br
.ti -1c
.RI "int \fBft_strnequ\fP (char const *s1, char const *s2, size_t n)"
.br
.ti -1c
.RI "char * \fBft_strstr\fP (char const *s1, char const *s2)"
.br
.ti -1c
.RI "char * \fBft_strinv\fP (char *s)"
.br
.ti -1c
.RI "int \fBft_isupper\fP (int c)"
.br
.ti -1c
.RI "int \fBft_isalpha\fP (int c)"
.br
.ti -1c
.RI "int \fBft_toupper\fP (int c)"
.br
.ti -1c
.RI "int \fBft_isalnum\fP (int c)"
.br
.ti -1c
.RI "int \fBft_isprint\fP (int c)"
.br
.ti -1c
.RI "int \fBft_isdigit\fP (int c)"
.br
.ti -1c
.RI "int \fBft_isascii\fP (int c)"
.br
.ti -1c
.RI "char * \fBft_strmap\fP (char const *s, char(*f)(char))"
.br
.ti -1c
.RI "char * \fBft_strmapi\fP (char const *s, char(*f)(unsigned int, char))"
.br
.ti -1c
.RI "void \fBft_bzero\fP (void *s, size_t n)"
.br
.ti -1c
.RI "void * \fBft_memalloc\fP (size_t size)"
.br
.ti -1c
.RI "void * \fBft_realloc\fP (void **src, size_t src_size, size_t final_size)"
.br
.ti -1c
.RI "void \fBft_memdel\fP (void **ap)"
.br
.ti -1c
.RI "void * \fBft_memset\fP (void *b, int c, size_t len)"
.br
.ti -1c
.RI "void * \fBft_memcpy\fP (void *dest, void const *src, size_t n)"
.br
.ti -1c
.RI "void * \fBft_memmove\fP (void *dest, void const *src, size_t len)"
.br
.ti -1c
.RI "void * \fBft_memccpy\fP (void *dest, void const *src, int c, size_t n)"
.br
.ti -1c
.RI "void * \fBft_memchr\fP (void const *s, int c, size_t n)"
.br
.ti -1c
.RI "int \fBft_memcmp\fP (void const *s1, void const *s2, size_t n)"
.br
.ti -1c
.RI "char * \fBft_itoa\fP (int n)"
.br
.ti -1c
.RI "int \fBft_atoi\fP (char const *s)"
.br
.ti -1c
.RI "int \fBft_pow\fP (int n, int p)"
.br
.ti -1c
.RI "unsigned int \fBft_abs\fP (signed int n)"
.br
.ti -1c
.RI "int \fBft_tabmax\fP (int *tab, int siz)"
.br
.ti -1c
.RI "int \fBft_tolower\fP (int c)"
.br
.ti -1c
.RI "int \fBft_strequ\fP (char const *s1, char const *s2)"
.br
.ti -1c
.RI "char * \fBft_strnstr\fP (char const *s1, char const *s2, size_t n)"
.br
.ti -1c
.RI "void \fBft_striter\fP (char *s, void(*f)(char *))"
.br
.ti -1c
.RI "void \fBft_striteri\fP (char *s, void(*f)(unsigned int, char *))"
.br
.ti -1c
.RI "void \fBft_lstadd\fP (\fBt_list\fP **alst, \fBt_list\fP *new)"
.br
.ti -1c
.RI "\fBt_list\fP * \fBft_lstinsert\fP (\fBt_list\fP **fflist, \fBt_list\fP *new, int(*f)(\fBt_list\fP *, \fBt_list\fP *))"
.br
.ti -1c
.RI "void \fBft_lstappend\fP (\fBt_list\fP *alst, \fBt_list\fP *new)"
.br
.ti -1c
.RI "void \fBft_lstiter\fP (\fBt_list\fP *lst, void(*f)(\fBt_list\fP *elem))"
.br
.ti -1c
.RI "void \fBft_lstdelone\fP (\fBt_list\fP **alst, void(*del)(void *))"
.br
.ti -1c
.RI "void \fBft_lstdel\fP (\fBt_list\fP **alst, void(*del)(void *))"
.br
.ti -1c
.RI "int \fBft_lstinsert_list\fP (\fBt_list\fP *fflist, \fBt_list\fP *ffnew, int(*f)(\fBt_list\fP *, \fBt_list\fP *))"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BUFF_SIZE   128"

.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBs_file\fP					 \fBt_file\fP"

.SS "typedef struct \fBs_list\fP					 \fBt_list\fP"

.SH "Function Documentation"
.PP 
.SS "unsigned int ft_abs (signed int n)"

.SS "int ft_atoi (char const * s)"

.SS "void ft_bzero (void * s, size_t n)"

.SS "int ft_getndigits (int a)"

.SS "int ft_isalnum (int c)"

.SS "int ft_isalpha (int c)"

.SS "int ft_isascii (int c)"

.SS "int ft_isdigit (int c)"

.SS "int ft_isprint (int c)"

.SS "int ft_isupper (int c)"

.SS "void ft_iswap (int * a, int * b)"

.SS "char* ft_itoa (int n)"

.SS "void ft_lstadd (\fBt_list\fP ** alst, \fBt_list\fP * new)"

.SS "void ft_lstappend (\fBt_list\fP * alst, \fBt_list\fP * new)"

.SS "void ft_lstdel (\fBt_list\fP ** alst, void(*)(void *) del)"

.SS "void ft_lstdelone (\fBt_list\fP ** alst, void(*)(void *) del)"

.SS "\fBt_list\fP* ft_lstinsert (\fBt_list\fP ** fflist, \fBt_list\fP * new, int(*)(\fBt_list\fP *, \fBt_list\fP *) f)"

.SS "int ft_lstinsert_list (\fBt_list\fP * fflist, \fBt_list\fP * ffnew, int(*)(\fBt_list\fP *, \fBt_list\fP *) f)"

.SS "void ft_lstiter (\fBt_list\fP * lst, void(*)(\fBt_list\fP *elem) f)"

.SS "void* ft_memalloc (size_t size)"

.SS "void* ft_memccpy (void * dest, void const * src, int c, size_t n)"

.SS "void* ft_memchr (void const * s, int c, size_t n)"

.SS "int ft_memcmp (void const * s1, void const * s2, size_t n)"

.SS "void* ft_memcpy (void * dest, void const * src, size_t n)"

.SS "void ft_memdel (void ** ap)"

.SS "void* ft_memmove (void * dest, void const * src, size_t len)"

.SS "void* ft_memset (void * b, int c, size_t len)"

.SS "void ft_pmem (const void * addr, size_t t)"

.SS "int ft_pow (int n, int p)"

.SS "void ft_putchar (char c)"

.SS "void ft_putchar_fd (char c, int fd)"

.SS "void ft_putendl (char const * s)"

.SS "void ft_putendl_fd (char const * s, int fd)"

.SS "void ft_puthex (unsigned char num)"

.SS "void ft_putnbr (int n)"

.SS "void ft_putnbr_fd (int n, int fd)"

.SS "void ft_putstr (char const * s)"

.SS "void ft_putstr_fd (char const * s, int fd)"

.SS "void* ft_realloc (void ** src, size_t src_size, size_t final_size)"

.SS "char* ft_strcat (char * s1, const char * s2)"

.SS "int ft_strcchr (char const * s, char c)"

.SS "char* ft_strchr (char const * s, int c)"

.SS "int ft_strclchr (char const * s, char c)"

.SS "void ft_strclr (char * s)"

.SS "int ft_strcmp (char * s1, char * s2)"

.SS "char* ft_strcpy (char * dest, const char * src)"

.SS "void ft_strdel (char ** as)"

.SS "char* ft_strdup (const char * s1)"

.SS "int ft_strequ (char const * s1, char const * s2)"

.SS "char* ft_strinv (char * s)"

.SS "void ft_striter (char * s, void(*)(char *) f)"

.SS "void ft_striteri (char * s, void(*)(unsigned int, char *) f)"

.SS "char* ft_strjoin (char const * s1, char const * s2)"

.SS "size_t ft_strlcat (char * dest, char const * src, size_t size)"

.SS "size_t ft_strlen (const char * str)"

.SS "char* ft_strmap (char const * s, char(*)(char) f)"

.SS "char* ft_strmapi (char const * s, char(*)(unsigned int, char) f)"

.SS "char* ft_strncat (char * s1, const char * s2, size_t n)"

.SS "int ft_strncmp (char const * s1, char const * s2, size_t n)"

.SS "char* ft_strncpy (char * dest, const char * src, size_t n)"

.SS "int ft_strnequ (char const * s1, char const * s2, size_t n)"

.SS "char* ft_strnew (size_t size)"

.SS "char* ft_strnstr (char const * s1, char const * s2, size_t n)"

.SS "char* ft_strrchr (char const * s, int c)"

.SS "char** ft_strsplit (char const * s, char * c)"

.SS "char* ft_strstr (char const * s1, char const * s2)"

.SS "char* ft_strsub (char const * s, unsigned int start, size_t len)"

.SS "char* ft_strtrim (char const * s)"

.SS "void ft_swap (void * a, void * b)"

.SS "int ft_tabmax (int * tab, int siz)"

.SS "int ft_tolower (int c)"

.SS "int ft_toupper (int c)"

.SS "int get_next_line (int const fd, char ** line)"

.SH "Author"
.PP 
Generated automatically by Doxygen for minishell from the source code\&.
